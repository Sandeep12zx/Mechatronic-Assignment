#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

// Keypad setup
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2); // Replace 0x27 with your LCD's I2C address

// Buzzer setup
const int buzzerPin = 16;

// Variables
String input = "";
String display = "";
float result = 0;
bool error = false;
String history[5] = {"", "", "", "", ""};
int historyIndex = 0;

void setup() {
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.print("Calculator");
  delay(2000);
  lcd.clear();
  pinMode(buzzerPin, OUTPUT);
}

void loop() {
  char key = keypad.getKey();
 
  if (key) {
    if (key >= '0' && key <= '9') {
      input += key;
      display += key;
    } else if (key == 'A') { // Addition
      performOperation('+');
    } else if (key == 'B') { // Subtraction
      performOperation('-');
    } else if (key == 'C') { // Multiplication
      performOperation('*');
    } else if (key == 'D') { // Division
      performOperation('/');
    } else if (key == '#') { // Equals
      calculate();
    } else if (key == '*') { // Clear
      clearCalculator();
    } else if (key == '1') { // Square root
      performFunction(sqrt);
    } else if (key == '2') { // Factorial
      performFunction(factorial);
    } else if (key == '3') { // Logarithm
      performFunction(log);
    }
   
    updateDisplay();
  }
}

void performOperation(char op) {
  if (input != "") {
    input += op;
  }
}

void performFunction(float (*func)(float)) {
  if (input != "") {
    float num = input.toFloat();
    result = func(num);
    input = String(result);
    addToHistory();
  }
}

void calculate() {
  if (input != "") {
    result = evaluateExpression(input);
    if (isnan(result)) {
      error = true;
    } else {
      input = String(result);
      addToHistory();
      beep();
    }
  }
}

void clearCalculator() {
  input = "";
  display = "";
  result = 0;
  error = false;
}

void updateDisplay() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Result:");
  lcd.setCursor(0, 1);
  if (error) {
    lcd.print("Error");
  } else {
    lcd.print(input);
  }
}

void addToHistory() {
  history[historyIndex] = input;
  historyIndex = (historyIndex + 1) % 5;
}

void beep() {
  tone(buzzerPin, 1000, 100);
  delay(100);
  noTone(buzzerPin);
}

float factorial(float n) {
  if (n < 0) return NAN;
  float result = 1;
  for (float i = 2; i <= n; i++) {
    result *= i;
  }
  return result;
}

float evaluateExpression(String expr) {
  // Complex expression evaluation would go here
  // This is a simplified version
  return 0;
}






///this is the software link: https://wokwi.com/projects/428388575819235329
